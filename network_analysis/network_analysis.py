import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox, QVBoxLayout, QSpacerItem, QSizePolicy, QLabel
import requests
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QFont
import joblib
import numpy as np
import pandas as pd
import random
import warnings
import sklearn

# Ignore warnings
warnings.filterwarnings("ignore")

# Load the classifier
classifier = joblib.load('randomforest.pkl')

# Load the data
data = pd.read_csv("network_extraction.csv")

class MainWindow(QWidget):
    def __init__(self, background_image_url=None):
        super().__init__()
        self.initUI(background_image_url)

    def initUI(self, background_image_url=None):
        if background_image_url:
            self.background_image = QLabel(self)
            if background_image_url.startswith(('http:', 'https:')):
                pixmap = QPixmap()
                pixmap.loadFromData(requests.get(background_image_url).content)
            else:
                pixmap = QPixmap(background_image_url)
                self.background_image.setPixmap(pixmap)
                self.background_image.setGeometry(0, 0, self.width(), self.height())  # Adjusted line

        layout = QVBoxLayout()

        # Add a vertical spacer before buttons
        spacer = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        layout.addItem(spacer)

        self.scan_button = QPushButton('Scan')
        self.scan_button.clicked.connect(self.run_scan)
        self.scan_button.setFixedWidth(300)  # Set the width of the button
        layout.addWidget(self.scan_button, alignment=Qt.AlignHCenter)

        dont_scan_button = QPushButton("Exit")
        dont_scan_button.clicked.connect(self.close_window)
        dont_scan_button.setFixedWidth(300)  # Set the width of the button
        layout.addWidget(dont_scan_button, alignment=Qt.AlignHCenter)

        # Add a vertical spacer after buttons
        spacer = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        layout.addItem(spacer)

        self.setLayout(layout)
        self.setGeometry(300, 300, 600, 400)  # Keep the window size
        self.setWindowTitle('NETWORK LOGS')

        # Increase font size of the buttons
        font = QFont()
        font.setPointSize(14)
        self.scan_button.setFont(font)
        dont_scan_button.setFont(font)

        # Set fixed size for the widget
        self.setFixedSize(self.width(), self.height())

    def run_scan(self):
        random_number = random.randint(0, 2356)
        sample_data = data.iloc[random_number].values.reshape(1, -1)
        pred = classifier.predict(sample_data)

        output = {0: 'TCP-SYN', 1: 'Normal', 2: 'PortScan', 3: 'Overflow', 4: 'Diversion', 5: 'Blackhole'}

        QMessageBox.information(self, "Scan Result", output[pred[0]])

    def close_window(self):
        self.close()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    background_image_url = r'C:\Users\iamve\Downloads\Network-logs.jpg'
    mainWindow = MainWindow(background_image_url)
    mainWindow.show()
    sys.exit(app.exec_())
